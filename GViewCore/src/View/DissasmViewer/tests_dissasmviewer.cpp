#include <catch.hpp>
#include "DissasmViewer.hpp"
#include "x86_x64/DissasmX86.hpp"
#include <array>

using namespace GView::View::DissasmViewer;

class DummyType : public GView::TypeInterface
{
  public:
    std::string_view GetTypeName() override
    {
        return "Dummy";
    }
    void RunCommand(std::string_view) override
    {
    }
    ~DummyType() override
    {
    }

    Reference<GView::Utils::SelectionZoneInterface> selectionZoneInterface;

    uint32 GetSelectionZonesCount() override
    {
        // CHECK(selectionZoneInterface.IsValid(), 0, "");
        return selectionZoneInterface->GetSelectionZonesCount();
    }

    TypeInterface::SelectionZone GetSelectionZone(uint32 index) override
    {
        static auto d = TypeInterface::SelectionZone{ 0, 0 };
        // CHECK(selectionZoneInterface.IsValid(), d, "");
        // CHECK(index < selectionZoneInterface->GetSelectionZonesCount(), d, "");

        return selectionZoneInterface->GetSelectionZone(index);
    }
};

struct ZoneCheckData {
    uint32 indexZoneStart;
    uint32 indexZoneEnd;
    bool shouldHaveName;
};

struct ZoneBeforeLines {
    uint32 zoneIndex;
    uint32 beforeTextLines;
    uint32 beforeAsmLines;
};

/* Example test 1
 *#include <Windows.h>
 #include <stdio.h>

int isPrime(int number) {
    // Handle special cases
    if (number <= 1 || number >= 100) {
        return -1;  // Not a valid number for this function
    }

    switch (number) {
    case 2: return 1;
    case 3: return 2;
    case 5: return 3;
    case 7: return 4;
    case 11: return 5;
    case 13: return 6;
    case 17: return 7;
    case 19: return 8;
    case 23: return 9;
    case 29: return 10;
    case 31: return 11;
    case 37: return 12;
    case 41: return 13;
    case 43: return 14;
    case 47: return 15;
    case 53: return 16;
    case 59: return 17;
    case 61: return 18;
    case 67: return 19;
    case 71: return 20;
    case 73: return 21;
    case 79: return 22;
    case 83: return 23;
    case 89: return 24;
    case 97: return 25;
    default: return -1;  // Not a prime number
    }
}

int main()
{
    int a = 1, b = 2, c = 3;
    //c += gcd(a, b);
    //std::cin >> a >> b;
    c += isPrime(a);
    c += isPrime(b);
    //c += calculateFactorial(c);
    //JustPrint(c);
    //std::cout << c;
    return 0;
}
 */
unsigned char exampleTest1BinaryCode[] = {
    204, 204, 204, 204, 204, 233, 38,  0,   0,   0,   233, 161, 2,   0,   0,   233, 12,  3,   0,   0,   233, 135, 2,   0,   0,   204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 85,  139, 236, 131, 236, 68,  83,  86,  87,  185, 162, 80,  64,  0,
    232, 204, 255, 255, 255, 131, 125, 8,   1,   126, 6,   131, 125, 8,   100, 124, 8,   131, 200, 255, 233, 241, 0,   0,   0,   139, 69,  8,   137, 69,  188,
    139, 77,  188, 131, 233, 2,   137, 77,  188, 131, 125, 188, 95,  15,  135, 213, 0,   0,   0,   139, 85,  188, 15,  182, 130, 184, 17,  64,  0,   255, 36,
    133, 80,  17,  64,  0,   184, 1,   0,   0,   0,   233, 189, 0,   0,   0,   184, 2,   0,   0,   0,   233, 179, 0,   0,   0,   184, 3,   0,   0,   0,   233,
    169, 0,   0,   0,   184, 4,   0,   0,   0,   233, 159, 0,   0,   0,   184, 5,   0,   0,   0,   233, 149, 0,   0,   0,   184, 6,   0,   0,   0,   233, 139,
    0,   0,   0,   184, 7,   0,   0,   0,   233, 129, 0,   0,   0,   184, 8,   0,   0,   0,   235, 122, 184, 9,   0,   0,   0,   235, 115, 184, 10,  0,   0,
    0,   235, 108, 184, 11,  0,   0,   0,   235, 101, 184, 12,  0,   0,   0,   235, 94,  184, 13,  0,   0,   0,   235, 87,  184, 14,  0,   0,   0,   235, 80,
    184, 15,  0,   0,   0,   235, 73,  184, 16,  0,   0,   0,   235, 66,  184, 17,  0,   0,   0,   235, 59,  184, 18,  0,   0,   0,   235, 52,  184, 19,  0,
    0,   0,   235, 45,  184, 20,  0,   0,   0,   235, 38,  184, 21,  0,   0,   0,   235, 31,  184, 22,  0,   0,   0,   235, 24,  184, 23,  0,   0,   0,   235,
    17,  184, 24,  0,   0,   0,   235, 10,  184, 25,  0,   0,   0,   235, 3,   131, 200, 255, 95,  94,  91,  139, 229, 93,  195, 144, 129, 16,  64,  0,   139,
    16,  64,  0,   149, 16,  64,  0,   159, 16,  64,  0,   169, 16,  64,  0,   179, 16,  64,  0,   189, 16,  64,  0,   199, 16,  64,  0,   206, 16,  64,  0,
    213, 16,  64,  0,   220, 16,  64,  0,   227, 16,  64,  0,   234, 16,  64,  0,   241, 16,  64,  0,   248, 16,  64,  0,   255, 16,  64,  0,   6,   17,  64,
    0,   13,  17,  64,  0,   20,  17,  64,  0,   27,  17,  64,  0,   34,  17,  64,  0,   41,  17,  64,  0,   48,  17,  64,  0,   55,  17,  64,  0,   62,  17,
    64,  0,   69,  17,  64,  0,   0,   1,   25,  2,   25,  3,   25,  25,  25,  4,   25,  5,   25,  25,  25,  6,   25,  7,   25,  25,  25,  8,   25,  25,  25,
    25,  25,  9,   25,  10,  25,  25,  25,  25,  25,  11,  25,  25,  25,  12,  25,  13,  25,  25,  25,  14,  25,  25,  25,  25,  25,  15,  25,  25,  25,  25,
    25,  16,  25,  17,  25,  25,  25,  25,  25,  18,  25,  25,  25,  19,  25,  20,  25,  25,  25,  25,  25,  21,  25,  25,  25,  22,  25,  25,  25,  25,  25,
    23,  25,  25,  25,  25,  25,  25,  25,  24,  204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 85,  139, 236, 93,  195, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 85,  139, 236, 131, 236, 76,  83,  86,  87,  185, 162, 80,  64,  0,   232, 76,  253, 255, 255, 199, 69,  252, 1,   0,   0,
    0,   199, 69,  248, 2,   0,   0,   0,   199, 69,  244, 3,   0,   0,   0,   139, 69,  252, 80,  232, 36,  253, 255, 255, 131, 196, 4,   3,   69,  244, 137,
    69,  244, 139, 69,  248, 80,  232, 18,  253, 255, 255, 131, 196, 4,   3,   69,  244, 137, 69,  244, 51,  192, 95,  94,  91,  139, 229, 93,  195, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 85,  139, 236, 131, 236, 8,
    137, 77,  252, 139, 69,  252, 137, 69,  248, 139, 77,  252, 15,  182, 17,  133, 210, 116, 24,  131, 61,  0,   48,  64,  0,   0,   116, 15,  255, 21,  0,
    64,  64,  0,   57,  5,   0,   48,  64,  0,   117, 1,   144, 139, 229, 93,  195, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 255, 37,
    0,   64,  64,  0,   204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0
};
constexpr size_t exampleTest1BinaryCodeSize = sizeof(exampleTest1BinaryCode);

class DissasmTestInstance
{
    bool CheckLinesWorkingIndexesSameAsZonesRecursive(std::vector<DissasmCodeInternalType>* childrenToCheck)
    {
        if (!childrenToCheck)
            return true;

        for (auto& z : *childrenToCheck) {
            if (z.indexZoneStart != z.workingIndexZoneStart || z.indexZoneEnd != z.workingIndexZoneEnd) {
                printf(
                      "CheckLinesWorkingIndexesSameAsZonesRecursive ERROR: zone %d<->%d, %d<->%d",
                      z.indexZoneStart,
                      z.workingIndexZoneStart,
                      z.indexZoneEnd,
                      z.workingIndexZoneEnd);
                return false;
            }
            if (!z.internalTypes.empty())
                if (!CheckLinesWorkingIndexesSameAsZonesRecursive(&z.internalTypes))
                    return false;
        }

        return true;
    }

  public:
    Instance* instance;
    std::vector<GView::Object> objects;
    std::unique_ptr<DissasmCodeZone> zone;

    DissasmTestInstance(const unsigned char* binaryData, size_t binaryDataSize)
    {
        instance = nullptr;
        assert(init(binaryData, binaryDataSize));
    }

    bool init(const unsigned char* binaryData, size_t binaryDataSize)
    {
        GView::Utils::DataCache cache              = GView::Utils::DataCache();
        std::unique_ptr<OS::MemoryFile> memoryFile = std::make_unique<OS::MemoryFile>();
        if (!memoryFile->Create(binaryData, binaryDataSize)) {
            printf("ERROR: creating memory file!");
            return false;
        }

        if (!cache.Init(std::move(memoryFile), static_cast<uint32>(memoryFile->GetSize()))) {
            printf("ERROR: creating cache!");
            return false;
        }

        objects.push_back(GView::Object(GView::Object::Type::MemoryBuffer, std::move(cache), nullptr, "dummy", "loc", 1));

        initDissasmCodeZone(&objects[0]);
        return true;
    }

    void initDissasmCodeZone(Reference<GView::Object> obj)
    {
        if (!obj.IsValid())
            obj = &objects[0];
        zone                                = std::make_unique<DissasmCodeZone>();
        zone->zoneDetails.language          = DisassemblyLanguage::x86;
        zone->zoneDetails.startingZonePoint = 0;
        zone->zoneDetails.size              = 5120;
        zone->zoneDetails.entryPoint        = 10;

        DissasmCodeZoneInitData initData      = {};
        initData.enableDeepScanDissasmOnStart = true;
        initData.maxLocationMemoryMappingSize = 6;
        initData.visibleRows                  = 53;
        initData.obj                          = obj;

        assert(zone->InitZone(initData));
    }

    bool CheckInternalTypes(uint32 zoneIndex, std::initializer_list<ZoneCheckData> zones)
    {
        if (zoneIndex >= zone->dissasmType.internalTypes.size() && zoneIndex != UINT32_MAX) {
            printf("ERROR: invalid zone index %d >= %llu", zoneIndex, zone->dissasmType.internalTypes.size());
            return false;
        }

        std::vector<DissasmCodeInternalType>* childrenToCheck = &zone->dissasmType.internalTypes;
        if (zoneIndex != UINT32_MAX)
            childrenToCheck = &zone->dissasmType.internalTypes[zoneIndex].internalTypes;

        if (childrenToCheck->size() != zones.size()) {
            printf("ERROR: invalid zone length %d >= %llu", zoneIndex, childrenToCheck->size());
            return false;
        }

        auto it = childrenToCheck->begin();
        for (auto& z : zones) {
            if (it->indexZoneStart != z.indexZoneStart || it->indexZoneEnd != z.indexZoneEnd || !it->name.empty() != z.shouldHaveName) {
                printf(
                      "ERROR: zone %d<->%d, %d<->%d, %d<->%d",
                      it->indexZoneStart,
                      z.indexZoneStart,
                      it->indexZoneEnd,
                      z.indexZoneEnd,
                      !it->name.empty(),
                      z.shouldHaveName);
                return false;
            }
            ++it;
        }
        return true;
    }
    bool CheckBeforeLinesData(uint32 zoneIndex, std::initializer_list<ZoneBeforeLines> zones)
    {
        if (zoneIndex >= zone->dissasmType.internalTypes.size() && zoneIndex != UINT32_MAX) {
            printf("ERROR: invalid zone index %d >= %llu", zoneIndex, zone->dissasmType.internalTypes.size());
            return false;
        }

        std::vector<DissasmCodeInternalType>* childrenToCheck = &zone->dissasmType.internalTypes;
        if (zoneIndex != UINT32_MAX)
            childrenToCheck = &zone->dissasmType.internalTypes[zoneIndex].internalTypes;

        for (auto& z : zones) {
            if (z.zoneIndex >= childrenToCheck->size()) {
                printf("ERROR: invalid zone index %d >= %llu", z.zoneIndex, childrenToCheck->size());
                return false;
            }
            const auto& it = (*childrenToCheck)[z.zoneIndex];

            // if (!it.IsValidDataLine()) {
            //     printf("ERROR: !IsValidDataLine for zone %d, %d<->%d != %d", z.zoneIndex, it.beforeTextLines, it.beforeAsmLines, it.indexZoneStart);
            //     return false;
            // }

            if (it.beforeTextLines != z.beforeTextLines || it.beforeAsmLines != z.beforeAsmLines) {
                printf("ERROR: [%d]zone: %d<->%d, %d<->%d", z.zoneIndex, it.beforeTextLines, z.beforeTextLines, it.beforeAsmLines, z.beforeAsmLines);
                return false;
            }
        }
        return true;
    }
    bool CheckLineOpStr(uint32 line, std::string_view startWithStr)
    {
        auto val = zone->GetCurrentAsmLine(line, &objects[0], nullptr);
        if (!std::string_view(val.op_str, val.op_str_size).starts_with(startWithStr)) {
            printf("[%u]op_str: %s\n", line, val.op_str);
            return false;
        }
        return true;
    }
    bool CheckLinesWorkingIndexesSameAsZones()
    {
        return CheckLinesWorkingIndexesSameAsZonesRecursive(&zone->dissasmType.internalTypes);
    }
    bool CheckLineMnemonic(uint32 line, std::string_view mnemonic)
    {
        auto val = zone->GetCurrentAsmLine(line, &objects[0], nullptr);
        if (val.mnemonic != mnemonic) {
            printf("[%u]mnemonic: %s\n", line, val.mnemonic);
            return false;
        }
        return true;
    }
    bool CheckLineMnemonicArray(uint32 startingLine, uint32 count, const char** mnemonicArray)
    {
        for (uint32 i = 0; i < count; i++) {
            auto val = zone->GetCurrentAsmLine(startingLine + i, &objects[0], nullptr);
            if (strcmp(val.mnemonic, mnemonicArray[i]) != 0) {
                printf("[%u]expected mnemonic:%s, found mnemonic: %s\n", startingLine + i, mnemonicArray[i], val.mnemonic);
                return false;
            }
        }
        return true;
    }

    bool AddOrUpdateComment(uint32 line, std::string comment)
    {
        return zone->AddOrUpdateComment(line, comment, false);
    }
    bool HasComment(uint32 line)
    {
        std::string temp;
        return zone->GetComment(line, temp);
    }

    DissasmCodeInternalType* GetDissasmCodeInternalTypeByLine(uint32 line)
    {
        return GetRecursiveCollpasedZoneByLine(zone->dissasmType, line);
    }

    bool CheckComment(uint32 line, std::string expectedValue)
    {
        std::string temp = {};
        if (!zone->GetComment(line, temp))
            return false;
        if (temp != expectedValue) {
            printf("Expected comment: \"%s\" and got: \"%s\"", expectedValue.c_str(), temp.c_str());
            return false;
        }
        return true;
    }
    bool RemoveComment(uint32 line)
    {
        return zone->RemoveComment(line, false);
    }

    void ReachZoneLine(uint32 zoneLine)
    {
        zone->ReachZoneLine(zoneLine);
    }
    DissasmAsmPreCacheLine GetCurrentAsmLine(uint32 line)
    {
        auto val = zone->GetCurrentAsmLine(line, &objects[0], nullptr);
        return val;
    }

    bool AddCollpasibleZone(uint32 zoneListStart, uint32 zoneLineEnd)
    {
        return zone->AddCollapsibleZone(zoneListStart, zoneLineEnd);
    }
    bool CheckCollapseOrExtendZone(uint32 zoneLine, DissasmCodeZone::CollapseExpandType collapse)
    {
        int32 difference = 0;
        return zone->CollapseOrExtendZone(zoneLine, collapse, difference);
    }
    bool RemoveCollapsibleZone(uint32 zoneLine)
    {
        return zone->RemoveCollapsibleZone(zoneLine);
    }

    void PrintInstructions(uint32 count)
    {
        std::string comment = {};
        for (uint32 i = 0; i < count; i++) {
            auto val = zone->GetCurrentAsmLine(i, &objects[0], nullptr);
            printf("[%u] %s %s ", i, val.mnemonic, val.op_str);

            for (const auto& type : zone->types) {
                if (type.get().name.empty())
                    continue;
                printf("%s ", type.get().name.c_str());
            }

            if (zone->GetComment(i, comment)) {
                printf("\tComment: \"%s\"", comment.c_str());
            }

            printf("\n");
        }
    }

    ~DissasmTestInstance()
    {
        delete instance;
    }
};

TEST_CASE("DissasmFunctions", "[Dissasm]Functions")
{
    uint64 value = 0;
    REQUIRE(!CheckExtractInsnHexValue("mov eax, 0x1234", value, 5));

    REQUIRE(CheckExtractInsnHexValue("f0x1234", value, 5));
    REQUIRE(value == 0x1234);

    REQUIRE(CheckExtractInsnHexValue("x1234", value, 5));
    REQUIRE(value == 1234);

    REQUIRE(!CheckExtractInsnHexValue("x", value, 5));

    REQUIRE(CheckExtractInsnHexValue("123", value, 5));
    REQUIRE(value == 123);

    REQUIRE(CheckExtractInsnHexValue("0x123", value, 5));
    REQUIRE(value == 0x123);

    REQUIRE(CheckExtractInsnHexValue("0", value, 5));
    REQUIRE(value == 0);

    REQUIRE(CheckExtractInsnHexValue("0x0", value, 5));
    REQUIRE(value == 0);

    REQUIRE(CheckExtractInsnHexValue("  123", value, 5));
    REQUIRE(value == 123);

    REQUIRE(CheckExtractInsnHexValue("mov ptr [0x123]", value, 5));
    REQUIRE(value == 0x123);

    REQUIRE(!CheckExtractInsnHexValue("mov eax, [0x123]", value, 5));
    REQUIRE(!CheckExtractInsnHexValue("mov [rbp + 0x123]", value, 5));
    REQUIRE(!CheckExtractInsnHexValue("mov [0x123], eax", value, 5));
}

TEST_CASE("AddAndCollapseCollapsibleZones", "[Dissasm]CollapsibleZones")
{
    DissasmTestInstance dissasmInstance(exampleTest1BinaryCode, exampleTest1BinaryCodeSize);

    uint32 zoneEndingIndex = 4572;

    REQUIRE(dissasmInstance.CheckLineMnemonic(6, "jmp"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(0, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(1, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(2, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(3, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(4, "int3"));

    REQUIRE(dissasmInstance.AddCollpasibleZone(2, 5));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 2 }, { 2, 5, true }, { 5, zoneEndingIndex } }));
    REQUIRE(dissasmInstance.CheckBeforeLinesData(-1, { { 0, 0, 0 }, { 1, 0, 2 }, { 2, 0, 5 } }));

    REQUIRE(!dissasmInstance.AddCollpasibleZone(2, 5));
    REQUIRE(!dissasmInstance.AddCollpasibleZone(1, 4));

    REQUIRE(dissasmInstance.AddCollpasibleZone(0, 2));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 2, true }, { 2, 5, true }, { 5, zoneEndingIndex } }));

    REQUIRE(dissasmInstance.AddCollpasibleZone(5, 11));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 2, true }, { 2, 5, true }, { 5, 11, true }, { 11, zoneEndingIndex } }));
    REQUIRE(dissasmInstance.CheckBeforeLinesData(-1, { { 0, 0, 0 }, { 1, 0, 2 }, { 2, 0, 5 }, { 3, 3, 8 } }));

    REQUIRE(dissasmInstance.AddCollpasibleZone(7, 9));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 2, true }, { 2, 5, true }, { 5, 11, true }, { 11, zoneEndingIndex } }));
    REQUIRE(dissasmInstance.CheckBeforeLinesData(-1, { { 0, 0, 0 }, { 1, 0, 2 }, { 2, 0, 5 }, { 3, 3, 8 } }));
    REQUIRE(dissasmInstance.CheckInternalTypes(2, { { 5, 7 }, { 7, 9, true }, { 9, 11 } }));
    REQUIRE(dissasmInstance.CheckBeforeLinesData(2, { { 0, 0, 5 }, { 1, 1, 6 }, { 2, 2, 7 } }));

    REQUIRE(dissasmInstance.CheckLinesWorkingIndexesSameAsZones());

    REQUIRE(dissasmInstance.CheckLineMnemonic(0, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(1, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(2, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(0, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(6, "jmp"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(3, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(0, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(4, "int3"));

    REQUIRE(dissasmInstance.CheckCollapseOrExtendZone(8, DissasmCodeZone::CollapseExpandType::Collapse));
    REQUIRE(dissasmInstance.CheckInternalTypes(2, { { 5, 7 }, { 7, 8, true }, { 8, 10 } }));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 2, true }, { 2, 5, true }, { 5, 10, true }, { 10, zoneEndingIndex - 1 } }));
    REQUIRE(!dissasmInstance.CheckCollapseOrExtendZone(7, DissasmCodeZone::CollapseExpandType::Collapse));
    REQUIRE(!dissasmInstance.CheckCollapseOrExtendZone(8, DissasmCodeZone::CollapseExpandType::Collapse));
    REQUIRE(dissasmInstance.CheckCollapseOrExtendZone(1, DissasmCodeZone::CollapseExpandType::Collapse));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 1, true }, { 1, 4, true }, { 4, 9, true }, { 9, zoneEndingIndex - 2 } }));
}

TEST_CASE("AddAndCollapseCollapsibleZones2", "[Dissasm]CollapsibleZones")
{
    DissasmTestInstance dissasmInstance(exampleTest1BinaryCode, exampleTest1BinaryCodeSize);
    uint32 zoneEndingIndex = 4572;

    std::array<const char*, 47> mnemonicArrayStart = { "int3", "int3",
                                                       "int3", "int3",
                                                       "int3", "sub_0x000000005",
                                                       "jmp",  "EntryPoint",
                                                       "jmp",  "sub_0x00000000F",
                                                       "jmp",  "jmp",
                                                       "int3", "int3",
                                                       "int3", "int3",
                                                       "int3", "int3",
                                                       "int3", "int3",
                                                       "int3", "int3",
                                                       "int3", "int3",
                                                       "int3", "int3",
                                                       "int3", "int3",
                                                       "int3", "int3",
                                                       "int3", "int3",
                                                       "int3", "int3",
                                                       "int3", "sub_0x000000030",
                                                       "push", "mov",
                                                       "sub",  "push",
                                                       "push", "push",
                                                       "mov",  "call",
                                                       "cmp",  "jle",
                                                       "cmp" };
    REQUIRE(dissasmInstance.CheckLineMnemonicArray(0, static_cast<uint32>(mnemonicArrayStart.size()), mnemonicArrayStart.data()));
    REQUIRE(dissasmInstance.AddCollpasibleZone(0, 5));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 5, true }, { 5, zoneEndingIndex } }));
    REQUIRE(dissasmInstance.CheckBeforeLinesData(-1, { { 0, 0, 0 }, { 1, 0, 5 } }));
    REQUIRE(dissasmInstance.CheckCollapseOrExtendZone(1, DissasmCodeZone::CollapseExpandType::Collapse));
    REQUIRE(dissasmInstance.CheckBeforeLinesData(-1, { { 0, 0, 0 }, { 1, 0, 5 } }));

    // dissasmInstance.PrintInstructions(50);
    std::array<const char*, 43> mnemonicArrayCollapse1 = { "collapsed", "sub_0x000000005",
                                                           "jmp",       "EntryPoint",
                                                           "jmp",       "sub_0x00000000F",
                                                           "jmp",       "jmp",
                                                           "int3",      "int3",
                                                           "int3",      "int3",
                                                           "int3",      "int3",
                                                           "int3",      "int3",
                                                           "int3",      "int3",
                                                           "int3",      "int3",
                                                           "int3",      "int3",
                                                           "int3",      "int3",
                                                           "int3",      "int3",
                                                           "int3",      "int3",
                                                           "int3",      "int3",
                                                           "int3",      "sub_0x000000030",
                                                           "push",      "mov",
                                                           "sub",       "push",
                                                           "push",      "push",
                                                           "mov",       "call",
                                                           "cmp",       "jle",
                                                           "cmp" };
    REQUIRE(dissasmInstance.CheckLineMnemonicArray(0, static_cast<uint32>(mnemonicArrayCollapse1.size()), mnemonicArrayCollapse1.data()));
    REQUIRE(dissasmInstance.CheckLineOpStr(0, "Zone"));

    REQUIRE(dissasmInstance.AddCollpasibleZone(8, 31));
    REQUIRE(dissasmInstance.CheckBeforeLinesData(-1, { { 0, 0, 0 }, { 1, 0, 5 } }));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 1, true }, { 1, 8 }, { 8, 31, true }, { 31, zoneEndingIndex } }));
    REQUIRE(dissasmInstance.CheckCollapseOrExtendZone(8, DissasmCodeZone::CollapseExpandType::Collapse));

    std::array<const char*, 21> mnemonicArrayCollapse2 = { "collapsed", "sub_0x000000005",
                                                           "jmp",       "EntryPoint",
                                                           "jmp",       "sub_0x00000000F",
                                                           "jmp",       "jmp",
                                                           "collapsed", "sub_0x000000030",
                                                           "push",      "mov",
                                                           "sub",       "push",
                                                           "push",      "push",
                                                           "mov",       "call",
                                                           "cmp",       "jle",
                                                           "cmp" };
    // dissasmInstance.PrintInstructions(50);
    REQUIRE(dissasmInstance.CheckLineMnemonicArray(0, mnemonicArrayCollapse2.size(), mnemonicArrayCollapse2.data()));
    // dissasmInstance.PrintInstructions(50);
}

TEST_CASE("GenricRemoveCollapsibleZone", "[Dissasm]CollapsibleZones")
{
    DissasmTestInstance dissasmInstance(exampleTest1BinaryCode, exampleTest1BinaryCodeSize);

    uint32 zoneEndingIndex = 4572;
    // dissasmInstance.PrintInstructions(50);
    REQUIRE(dissasmInstance.CheckLineMnemonic(0, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(1, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(2, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(3, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(4, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(5, "sub_0x000000005"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(6, "jmp"));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, {}));

    REQUIRE(dissasmInstance.AddCollpasibleZone(0, 5));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 5, true }, { 5, zoneEndingIndex } }));
    REQUIRE(dissasmInstance.CheckBeforeLinesData(-1, { { 0, 0, 0 }, { 1, 0, 5 } }));

    REQUIRE(dissasmInstance.AddCollpasibleZone(8, 10));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 5, true }, { 5, 8 }, { 8, 10, true }, { 10, zoneEndingIndex } }));
    REQUIRE(dissasmInstance.CheckBeforeLinesData(-1, { { 0, 0, 0 }, { 1, 0, 5 }, { 2, 2, 6 }, { 3, 3, 7 } }));
    REQUIRE(dissasmInstance.CheckLinesWorkingIndexesSameAsZones());

    REQUIRE(dissasmInstance.CheckCollapseOrExtendZone(0, DissasmCodeZone::CollapseExpandType::Collapse));
    REQUIRE(dissasmInstance.CheckLineMnemonic(0, "collapsed"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(2, "jmp"));

    REQUIRE(dissasmInstance.CheckCollapseOrExtendZone(0, DissasmCodeZone::CollapseExpandType::Expand));
    REQUIRE(dissasmInstance.CheckLineMnemonic(0, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(1, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(2, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(3, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(4, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(5, "sub_0x000000005"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(6, "jmp"));
    REQUIRE(dissasmInstance.CheckLinesWorkingIndexesSameAsZones());

    REQUIRE(!dissasmInstance.CheckCollapseOrExtendZone(0, DissasmCodeZone::CollapseExpandType::Expand)); // already expanded

    REQUIRE(dissasmInstance.RemoveCollapsibleZone(8));
    // same as before, after dissasmInstance.AddCollpasibleZone(0, 5)
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 5, true }, { 5, zoneEndingIndex } }));
    REQUIRE(dissasmInstance.CheckBeforeLinesData(-1, { { 0, 0, 0 }, { 1, 0, 5 } }));
    REQUIRE(dissasmInstance.CheckLinesWorkingIndexesSameAsZones());

    REQUIRE(dissasmInstance.AddCollpasibleZone(8, 10));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 5, true }, { 5, 8 }, { 8, 10, true }, { 10, zoneEndingIndex } }));
    REQUIRE(dissasmInstance.CheckBeforeLinesData(-1, { { 0, 0, 0 }, { 1, 0, 5 }, { 2, 2, 6 }, { 3, 2, 8 } }));
    REQUIRE(dissasmInstance.CheckLinesWorkingIndexesSameAsZones());

    REQUIRE(!dissasmInstance.RemoveCollapsibleZone(5));
    REQUIRE(!dissasmInstance.RemoveCollapsibleZone(6));
    REQUIRE(!dissasmInstance.RemoveCollapsibleZone(7));
    REQUIRE(!dissasmInstance.RemoveCollapsibleZone(10));

    // dissasmInstance.PrintInstructions(12);
    REQUIRE(dissasmInstance.RemoveCollapsibleZone(4));
    // dissasmInstance.PrintInstructions(12);

    REQUIRE(dissasmInstance.CheckLineMnemonic(0, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(1, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(2, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(3, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(4, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(5, "sub_0x000000005"));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 8 }, { 8, 10, true }, { 10, zoneEndingIndex } }));
    REQUIRE(dissasmInstance.CheckBeforeLinesData(-1, { { 0, 0, 0 }, { 1, 2, 6 }, { 2, 2, 8 } }));
    REQUIRE(dissasmInstance.CheckLinesWorkingIndexesSameAsZones());
}

TEST_CASE("RemoveCollapsibleZoneSpecialCases", "[Dissasm]CollapsibleZones")
{
    DissasmTestInstance dissasmInstance(exampleTest1BinaryCode, exampleTest1BinaryCodeSize);

    uint32 zoneEndingIndex = 4572;
    // dissasmInstance.PrintInstructions(20);
    REQUIRE(dissasmInstance.CheckLineMnemonic(0, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(1, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(2, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(3, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(4, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(5, "sub_0x000000005"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(6, "jmp"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(7, "EntryPoint"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(8, "jmp"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(9, "sub_0x00000000F"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(10, "jmp"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(11, "jmp"));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, {}));

    SECTION("removing first collapsible zones[2]")
    {
        REQUIRE(dissasmInstance.AddCollpasibleZone(0, 6));
        REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 6, true }, { 6, zoneEndingIndex } }));

        REQUIRE(dissasmInstance.RemoveCollapsibleZone(5));
        // dissasmInstance.PrintInstructions(20);
        REQUIRE(dissasmInstance.CheckLineMnemonic(0, "int3"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(1, "int3"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(2, "int3"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(3, "int3"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(4, "int3"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(5, "sub_0x000000005"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(6, "jmp"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(7, "EntryPoint"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(8, "jmp"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(9, "sub_0x00000000F"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(10, "jmp"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(11, "jmp"));
    }

    SECTION("removing middle collapsible zones[3]")
    {
        REQUIRE(dissasmInstance.AddCollpasibleZone(9, 11));
        REQUIRE(dissasmInstance.CheckInternalTypes(-1, { { 0, 9 }, { 9, 11, true }, { 11, zoneEndingIndex } }));

        REQUIRE(dissasmInstance.RemoveCollapsibleZone(10));
        // dissasmInstance.PrintInstructions(20);
        REQUIRE(dissasmInstance.CheckLineMnemonic(0, "int3"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(1, "int3"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(2, "int3"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(3, "int3"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(4, "int3"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(5, "sub_0x000000005"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(6, "jmp"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(7, "EntryPoint"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(8, "jmp"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(9, "sub_0x00000000F"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(10, "jmp"));
        REQUIRE(dissasmInstance.CheckLineMnemonic(11, "jmp"));
    }
}

TEST_CASE("ValidatingComments", "[Dissasm]Comments")
{
    DissasmTestInstance dissasmInstance(exampleTest1BinaryCode, exampleTest1BinaryCodeSize);

    uint32 zoneEndingIndex = 4572;
    // dissasmInstance.PrintInstructions(20);
    REQUIRE(dissasmInstance.CheckLineMnemonic(0, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(1, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(2, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(3, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(4, "int3"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(5, "sub_0x000000005"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(6, "jmp"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(7, "EntryPoint"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(8, "jmp"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(9, "sub_0x00000000F"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(10, "jmp"));
    REQUIRE(dissasmInstance.CheckLineMnemonic(11, "jmp"));
    REQUIRE(dissasmInstance.CheckInternalTypes(-1, {}));

    REQUIRE(dissasmInstance.AddOrUpdateComment(2, "c2"));
    REQUIRE(dissasmInstance.AddOrUpdateComment(5, "c5"));
    REQUIRE(dissasmInstance.AddOrUpdateComment(10, "c10"));
    REQUIRE(dissasmInstance.AddOrUpdateComment(20, "c0"));

    REQUIRE(dissasmInstance.HasComment(20));
    REQUIRE(dissasmInstance.CheckComment(20, "c0"));

    REQUIRE(!dissasmInstance.HasComment(1));
    REQUIRE(dissasmInstance.HasComment(2));
    REQUIRE(dissasmInstance.CheckComment(2, "c2"));

    REQUIRE(!dissasmInstance.HasComment(4));
    REQUIRE(dissasmInstance.HasComment(5));
    REQUIRE(dissasmInstance.CheckComment(5, "c5"));

    REQUIRE(!dissasmInstance.HasComment(9));
    REQUIRE(dissasmInstance.HasComment(10));
    REQUIRE(dissasmInstance.CheckComment(10, "c10"));

    // SECTION("collapsible zones")
    REQUIRE(dissasmInstance.AddCollpasibleZone(5, 12)); // comments on lines 5 and 10 should be inside
    auto internalZone = dissasmInstance.GetDissasmCodeInternalTypeByLine(10);
    REQUIRE(internalZone);
    REQUIRE(internalZone->commentsData.HasComment(5));
    REQUIRE(internalZone->commentsData.HasComment(10));
    REQUIRE(dissasmInstance.CheckCollapseOrExtendZone(10, DissasmCodeZone::CollapseExpandType::Collapse));

    REQUIRE(internalZone->commentsData.HasComment(5));  // available, but not visible
    REQUIRE(dissasmInstance.HasComment(5));
    REQUIRE(internalZone->commentsData.HasComment(10)); // available, but not visible
    REQUIRE(!dissasmInstance.HasComment(20));           // it has been moved due to collapse of the zone
    REQUIRE(dissasmInstance.HasComment(14));
    REQUIRE(dissasmInstance.CheckComment(14, "c0"));

    //dissasmInstance.PrintInstructions(30);

    SECTION("updating and remove")
    {
        REQUIRE(dissasmInstance.AddOrUpdateComment(10, "c1010"));
        REQUIRE(dissasmInstance.HasComment(10));
        REQUIRE(dissasmInstance.CheckComment(10, "c1010"));

        REQUIRE(dissasmInstance.HasComment(10));
        REQUIRE(dissasmInstance.RemoveComment(10));
        REQUIRE(!dissasmInstance.HasComment(10));

        REQUIRE(dissasmInstance.HasComment(5));
        REQUIRE(dissasmInstance.RemoveComment(5));
        REQUIRE(!dissasmInstance.HasComment(5));
    }
}